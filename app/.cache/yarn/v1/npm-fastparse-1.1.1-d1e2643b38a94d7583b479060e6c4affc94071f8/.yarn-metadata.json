{
  "manifest": {
    "name": "fastparse",
    "version": "1.1.1",
    "description": "A very simple and stupid parser, based on a statemachine and regular expressions.",
    "main": "lib/Parser.js",
    "scripts": {
      "pretest": "npm run lint",
      "test": "mocha",
      "travis": "npm run cover -- --report lcovonly",
      "lint": "eslint lib",
      "precover": "npm run lint",
      "cover": "istanbul cover node_modules/mocha/bin/_mocha",
      "publish-patch": "mocha && npm version patch && git push && git push --tags && npm publish"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/webpack/fastparse.git"
    },
    "keywords": [
      "parser",
      "regexp"
    ],
    "author": {
      "name": "Tobias Koppers @sokra"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/webpack/fastparse/issues"
    },
    "homepage": "https://github.com/webpack/fastparse",
    "devDependencies": {
      "coveralls": "^2.11.2",
      "eslint": "^0.21.2",
      "istanbul": "^0.3.14",
      "mocha": "^2.2.5",
      "should": "^6.0.3"
    },
    "_registry": "npm",
    "_loc": "/var/www/app/.cache/yarn/v1/npm-fastparse-1.1.1-d1e2643b38a94d7583b479060e6c4affc94071f8/package.json",
    "readmeFilename": "README.md",
    "readme": "# fastparse\n\nA very simple and stupid parser, based on a statemachine and regular expressions.\n\nIt's not intended for complex languages. It's intended to easily write a simple parser for a simple language.\n\n\n\n## Usage\n\nPass a description of statemachine to the constructor. The description must be in this form:\n\n``` javascript\nnew Parser(description)\n\ndescription is {\n\t// The key is the name of the state\n\t// The value is an object containing possible transitions\n\t\"state-name\": {\n\t\t// The key is a regular expression\n\t\t// If the regular expression matches the transition is executed\n\t\t// The value can be \"true\", a other state name or a function\n\n\t\t\"a\": true,\n\t\t// true will make the parser stay in the current state\n\t\t\n\t\t\"b\": \"other-state-name\",\n\t\t// a string will make the parser transit to a new state\n\t\t\n\t\t\"[cde]\": function(match, index, matchLength) {\n\t\t\t// \"match\" will be the matched string\n\t\t\t// \"index\" will be the position in the complete string\n\t\t\t// \"matchLength\" will be \"match.length\"\n\t\t\t\n\t\t\t// \"this\" will be the \"context\" passed to the \"parse\" method\"\n\t\t\t\n\t\t\t// A new state name (string) can be returned\n\t\t\treturn \"other-state-name\";\n\t\t},\n\t\t\n\t\t\"([0-9]+)(\\\\.[0-9]+)?\": function(match, first, second, index, matchLength) {\n\t\t\t// groups can be used in the regular expression\n\t\t\t// they will match to arguments \"first\", \"second\"\n\t\t},\n\t\t\n\t\t// the parser stops when it cannot match the string anymore\n\t\t\n\t\t// order of keys is the order in which regular expressions are matched\n\t\t// if the javascript runtime preserves the order of keys in an object\n\t\t// (this is not standardized, but it's a de-facto standard)\n\t}\n}\n```\n\nThe statemachine is compiled down to a single regular expression per state. So basically the parsing work is delegated to the (native) regular expression logic of the javascript runtime.\n\n\n``` javascript\nParser.prototype.parse(initialState: String, parsedString: String, context: Object)\n```\n\n`initialState`: state where the parser starts to parse.\n\n`parsedString`: the string which should be parsed.\n\n`context`: an object which can be used to save state and results. Available as `this` in transition functions.\n\nreturns `context`\n\n\n\n\n## Example\n\n``` javascript\nvar Parser = require(\"fastparse\");\n\n// A simple parser that extracts @licence ... from comments in a JS file\nvar parser = new Parser({\n\t// The \"source\" state\n\t\"source\": {\n\t\t// matches comment start\n\t\t\"/\\\\*\": \"comment\",\n\t\t\"//\": \"linecomment\",\n\t\t\n\t\t// this would be necessary for a complex language like JS\n\t\t// but omitted here for simplicity\n\t\t// \"\\\"\": \"string1\",\n\t\t// \"\\'\": \"string2\",\n\t\t// \"\\/\": \"regexp\"\n\t\t\n\t},\n\t// The \"comment\" state\n\t\"comment\": {\n\t\t\"\\\\*/\": \"source\",\n\t\t\"@licen[cs]e\\\\s((?:[^*\\n]|\\\\*+[^*/\\n])*)\": function(match, licenseText) {\n\t\t\tthis.licences.push(licenseText.trim());\n\t\t}\n\t},\n\t// The \"linecomment\" state\n\t\"linecomment\": {\n\t\t\"\\n\": \"source\",\n\t\t\"@licen[cs]e\\\\s(.*)\": function(match, licenseText) {\n\t\t\tthis.licences.push(licenseText.trim());\n\t\t}\n\t}\n});\n\nvar licences = parser.parse(\"source\", sourceCode, { licences: [] }).licences;\n\nconsole.log(licences);\n```\n\n\n\n## License\n\nMIT (http://www.opensource.org/licenses/mit-license.php)\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/fastparse/-/fastparse-1.1.1.tgz#d1e2643b38a94d7583b479060e6c4affc94071f8",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/fastparse/-/fastparse-1.1.1.tgz",
    "hash": "d1e2643b38a94d7583b479060e6c4affc94071f8",
    "registry": "npm",
    "packageName": "fastparse"
  },
  "registry": "npm",
  "hash": "d1e2643b38a94d7583b479060e6c4affc94071f8"
}