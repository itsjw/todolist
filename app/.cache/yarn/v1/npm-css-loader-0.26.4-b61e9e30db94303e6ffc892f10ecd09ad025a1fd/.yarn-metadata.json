{
  "manifest": {
    "name": "css-loader",
    "version": "0.26.4",
    "author": {
      "name": "Tobias Koppers @sokra"
    },
    "description": "css loader module for webpack",
    "engines": {
      "node": ">=0.12.0 || >=4.3.0 <5.0.0 || >=5.10"
    },
    "files": [
      "index.js",
      "locals.js",
      "lib"
    ],
    "dependencies": {
      "babel-code-frame": "^6.11.0",
      "css-selector-tokenizer": "^0.7.0",
      "cssnano": ">=2.6.1 <4",
      "loader-utils": "^1.0.2",
      "lodash.camelcase": "^4.3.0",
      "object-assign": "^4.0.1",
      "postcss": "^5.0.6",
      "postcss-modules-extract-imports": "^1.0.0",
      "postcss-modules-local-by-default": "^1.0.1",
      "postcss-modules-scope": "^1.0.0",
      "postcss-modules-values": "^1.1.0",
      "source-list-map": "^0.1.7"
    },
    "devDependencies": {
      "codecov": "^1.0.1",
      "eslint": "3.14.0",
      "istanbul": "^0.4.5",
      "mocha": "^3.2.0",
      "should": "^11.1.2"
    },
    "scripts": {
      "test": "mocha",
      "test:cover": "npm run cover -- --report lcovonly",
      "lint": "eslint lib test",
      "travis:test": "npm run cover",
      "travis:lint": "npm run lint",
      "cover": "istanbul cover node_modules/mocha/bin/_mocha",
      "publish-patch": "mocha && npm version patch && git push && git push --tags && npm publish"
    },
    "repository": {
      "type": "git",
      "url": "git@github.com:webpack/css-loader.git"
    },
    "license": "MIT",
    "_registry": "npm",
    "_loc": "/var/www/app/.cache/yarn/v1/npm-css-loader-0.26.4-b61e9e30db94303e6ffc892f10ecd09ad025a1fd/package.json",
    "readmeFilename": "README.md",
    "readme": "[![npm][npm]][npm-url]\n[![node][node]][node-url]\n[![deps][deps]][deps-url]\n[![tests][tests]][tests-url]\n[![coverage][cover]][cover-url]\n[![chat][chat]][chat-url]\n\n<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://cdn.worldvectorlogo.com/logos/css-3.svg\">\n  <a href=\"https://github.com/webpack/webpack\">\n    <img width=\"200\" height=\"200\"\n      src=\"https://webpack.js.org/assets/icon-square-big.svg\">\n  </a>\n  <h1>CSS Loader</h1>\n</div>\n\n<h2 align=\"center\">Install</h2>\n\n```bash\nnpm install --save-dev css-loader\n```\n\n<h2 align=\"center\">Usage</h2>\n\nThe `css-loader` interprets `@import` and `url()` like `requires`.\n\nUse the loader either via your webpack config, CLI or inline.\n\n### Via webpack config (recommended)\n\n**webpack.config.js**\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [ 'style-loader', 'css-loader' ]\n      }\n    ]\n  }\n}\n```\n\n**In your application**\n```js\nimport css from 'file.css';\n```\n\n### CLI\n\n```bash\nwebpack --module-bind 'css=style-loader!css-loader'\n```\n\n**In your application**\n```js\nimport css from 'file.css';\n```\n\n### Inline\n\n**In your application**\n```js\nimport css from 'style-loader!css-loader!./file.css';\n```\n\n<h2 align=\"center\">Options</h2>\n\n`@import` and `url()` are interpreted like `import` and will be resolved by the css-loader.\nGood loaders for requiring your assets are the [file-loader](https://github.com/webpack/file-loader)\nand the [url-loader](https://github.com/webpack/url-loader) which you should specify in your config (see below).\n\nTo be compatible with existing css files (if not in CSS Module mode):\n\n* `url(image.png)` => `require('./image.png')`\n* `url(~module/image.png)` => `require('module/image.png')`\n\n<h2 align=\"center\">Options</h2>\n\n|Name|Default|Description|\n|:--:|:-----:|:----------|\n|**`root`**|`/`|Path to resolve URLs, URLs starting with `/` will not be translated|\n|**`modules`**|`false`|Enable/Disable CSS Modules|\n|**`import`** |`true`| Enable/Disable @import handling|\n|**`url`**|`true`| Enable/Disable `url()` handling|\n|**`minimize`**|`false`|Enable/Disable minification|\n|**`sourceMap`**|`false`|Enable/Disable Sourcemaps|\n|**`camelCase`**|`false`|Export Classnames in CamelCase|\n|**`importLoaders`**|`0`|Number of loaders applied before CSS loader|\n\nThe following webpack config can load CSS files, embed small PNG/JPG/GIF/SVG images as well as fonts as [Data URLs](https://tools.ietf.org/html/rfc2397) and copy larger files to the output directory.\n\n**webpack.config.js**\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [ 'style-loader', 'css-loader' ]\n      },\n      {\n        test: /\\.(png|jpg|gif|svg|eot|ttf|woff|woff2)$/,\n        loader: 'url-loader',\n        options: {\n          limit: 10000\n        }\n      }\n    ]\n  }\n};\n```\n\n### Root\n\nFor URLs that start with a `/`, the default behavior is to not translate them:\n\n* `url(/image.png)` => `url(/image.png)`\n\nIf a `root` query parameter is set, however, it will be prepended to the URL\nand then translated:\n\n**webpack.config.js**\n```js\nrules: [\n  {\n    test: /\\.css$/,\n    use: [\n      'style-loader',\n      {\n        loader: 'css-loader',\n        options: { root: '.' }\n      }\n    ]\n  }\n]\n```\n\n* `url(/image.png)` => `require('./image.png')`\n\nUsing 'Root-relative' urls is not recommended. You should only use it for legacy CSS files.\n\n### CSS Scope\n\nBy default CSS exports all class names into a global selector scope. Styles can be locally scoped to avoid globally scoping styles.\n\nThe syntax `:local(.className)` can be used to declare `className` in the local scope. The local identifiers are exported by the module.\n\nWith `:local` (without brackets) local mode can be switched on for this selector. `:global(.className)` can be used to declare an explicit global selector. With `:global` (without brackets) global mode can be switched on for this selector.\n\nThe loader replaces local selectors with unique identifiers. The choosen unique identifiers are exported by the module.\n\n**app.css**\n```css\n:local(.className) { background: red; }\n:local .className { color: green; }\n:local(.className .subClass) { color: green; }\n:local .className .subClass :global(.global-class-name) { color: blue; }\n```\n\n**app.bundle.css**\n``` css\n._23_aKvs-b8bW2Vg3fwHozO { background: red; }\n._23_aKvs-b8bW2Vg3fwHozO { color: green; }\n._23_aKvs-b8bW2Vg3fwHozO ._13LGdX8RMStbBE9w-t0gZ1 { color: green; }\n._23_aKvs-b8bW2Vg3fwHozO ._13LGdX8RMStbBE9w-t0gZ1 .global-class-name { color: blue; }\n```\n\n> Note: Identifiers are exported\n\n``` js\nexports.locals = {\n  className: '_23_aKvs-b8bW2Vg3fwHozO',\n  subClass: '_13LGdX8RMStbBE9w-t0gZ1'\n}\n```\n\nCamelCase is recommended for local selectors. They are easier to use in the within the imported JS module.\n\n`url()` URLs in block scoped (`:local .abc`) rules behave like requests in modules:\n\n* `./file.png` instead of `file.png`\n* `module/file.png` instead of `~module/file.png`\n\nYou can use `:local(#someId)`, but this is not recommended. Use classes instead of ids.\n\nYou can configure the generated ident with the `localIdentName` query parameter (default `[hash:base64]`).\n\n **webpack.config.js**\n ```js\n{\n  test: /\\.css$/,\n  use: [\n    {\n      loader: 'css-loader',\n      options: {\n        modules: true,\n        localIdentName: '[path][name]__[local]--[hash:base64:5]'\n      }\n    }\n  ]\n}\n```\n\nYou can also specify the absolute path to your custom `getLocalIdent` function to generate classname based on a different schema. Note that this requires `webpack >= v2.x.` since to be able to pass function in. For example:\n\n```js\n{\n  test: /\\.css$/,\n  use: [\n    {\n      loader: 'css-loader',\n      options: {\n        modules: true,\n        localIdentName: '[path][name]__[local]--[hash:base64:5]',\n        getLocalIdent: (context, localIdentName, localName, options) => {\n          return 'whatever_random_class_name'\n        }\n      }\n    }\n  ]\n}\n```\n\nNote: For prerendering with extract-text-webpack-plugin you should use `css-loader/locals` instead of `style-loader!css-loader` **in the prerendering bundle**. It doesn't embed CSS but only exports the identifier mappings.\n\n### [CSS Modules](https://github.com/css-modules/css-modules)\n\nThe query parameter `modules` enables the **CSS Modules** spec.\n\nThis enables local scoped CSS by default. (You can switch it off with `:global(...)` or `:global` for selectors and/or rules.)\n\n### CSS Composing\n\nWhen declaring a local class name you can compose a local class from another local class name.\n\n``` css\n:local(.className) {\n  background: red;\n  color: yellow;\n}\n\n:local(.subClass) {\n  composes: className;\n  background: blue;\n}\n```\n\nThis doesn't result in any change to the CSS itself but exports multiple class names:\n\n```js\nexports.locals = {\n  className: '_23_aKvs-b8bW2Vg3fwHozO',\n  subClass: '_13LGdX8RMStbBE9w-t0gZ1 _23_aKvs-b8bW2Vg3fwHozO'\n}\n```\n\n``` css\n._23_aKvs-b8bW2Vg3fwHozO {\n  background: red;\n  color: yellow;\n}\n\n._13LGdX8RMStbBE9w-t0gZ1 {\n  background: blue;\n}\n```\n\n### Importing CSS Locals\n\nTo import a local class name from another module:\n\n``` css\n:local(.continueButton) {\n  composes: button from 'library/button.css';\n  background: red;\n}\n```\n\n``` css\n:local(.nameEdit) {\n  composes: edit highlight from './edit.css';\n  background: red;\n}\n```\n\nTo import from multiple modules use multiple `composes:` rules.\n\n``` css\n:local(.className) {\n  composes: edit hightlight from './edit.css';\n  composes: button from 'module/button.css';\n  composes: classFromThisModule;\n  background: red;\n}\n```\n\n### SourceMaps\n\nTo include Sourcemaps set the `sourceMap` query param.\n\nI. e. the extract-text-webpack-plugin can handle them.\n\nThey are not enabled by default because they expose a runtime overhead and increase in bundle size (JS SourceMap do not). In addition to that relative paths are buggy and you need to use an absolute public path which include the server URL.\n\n**webpack.config.js**\n```js\n{\n  test: /\\.css$/,\n  use: [\n    {\n      loader: 'css-loader',\n      options: {\n        sourceMap: true\n      }\n    }\n  ]\n}\n```\n\n### ImportLoaders\n\nThe query parameter `importLoaders` allow to configure which loaders should be applied to `@import`ed resources.\n\n`importLoaders`: That many loaders after the css-loader are used to import resources.\n\n**webpack.config.js**\n```js\n{\n  test: /\\.css$/,\n  use: [\n    {\n      loader: 'css-loader',\n      options: {\n        importLoaders: 1\n      }\n    },\n    'postcss-loader'\n  ]\n}\n```\n\nThis may change in the future, when the module system (i. e. webpack) supports loader matching by origin.\n\n### Minification\n\nBy default the css-loader minimizes the css if specified by the module system.\n\nIn some cases the minification is destructive to the css, so you can provide some options to it. cssnano is used for minification and you find a [list of options here](http://cssnano.co/options/).\n\nYou can also disable or enforce minification with the `minimize` query parameter.\n\n**webpack.config.js**\n```js\n{\n  test: /\\.css$/,\n  use: [\n    {\n      loader: 'css-loader',\n      options: {\n        minimize: true || {/* CSSNano Options */}\n      }\n    }\n  ]\n}\n```\n\n### CamelCase\n\nBy default, the exported JSON keys mirror the class names. If you want to camelize class names (useful in JS), pass the query parameter `camelCase` to css-loader.\n\n**webpack.config.js**\n```js\n{\n  test: /\\.css$/,\n  use: [\n    {\n      loader: 'css-loader',\n      options: {\n        camelCase: true\n      }\n    }\n  ]\n}\n```\n\n```css\n.class-name {}\n```\n\n```js\nimport { className } from 'file.css';\n```\n\n<h2 align=\"center\">Maintainers</h2>\n\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\">\n        <img width=\"150\" height=\"150\"\n        src=\"https://avatars3.githubusercontent.com/u/166921?v=3&s=150\">\n        </br>\n        <a href=\"https://github.com/bebraw\">Juho Vepsäläinen</a>\n      </td>\n      <td align=\"center\">\n        <img width=\"150\" height=\"150\"\n        src=\"https://avatars2.githubusercontent.com/u/8420490?v=3&s=150\">\n        </br>\n        <a href=\"https://github.com/d3viant0ne\">Joshua Wiens</a>\n      </td>\n      <td align=\"center\">\n        <img width=\"150\" height=\"150\"\n        src=\"https://avatars3.githubusercontent.com/u/533616?v=3&s=150\">\n        </br>\n        <a href=\"https://github.com/SpaceK33z\">Kees Kluskens</a>\n      </td>\n      <td align=\"center\">\n        <img width=\"150\" height=\"150\"\n        src=\"https://avatars3.githubusercontent.com/u/3408176?v=3&s=150\">\n        </br>\n        <a href=\"https://github.com/TheLarkInn\">Sean Larkin</a>\n      </td>\n    </tr>\n  <tbody>\n</table>\n\n\n[npm]: https://img.shields.io/npm/v/css-loader.svg\n[npm-url]: https://npmjs.com/package/css-loader\n\n[node]: https://img.shields.io/node/v/css-loader.svg\n[node-url]: https://nodejs.org\n\n[deps]: https://david-dm.org/webpack/css-loader.svg\n[deps-url]: https://david-dm.org/webpack/css-loader\n\n[tests]: http://img.shields.io/travis/webpack/css-loader.svg\n[tests-url]: https://travis-ci.org/webpack/css-loader\n\n[cover]: https://coveralls.io/repos/github/webpack/css-loader/badge.svg\n[cover-url]: https://coveralls.io/github/webpack/css-loader\n\n[chat]: https://badges.gitter.im/webpack/webpack.svg\n[chat-url]: https://gitter.im/webpack/webpack\n",
    "licenseText": "Copyright JS Foundation and other contributors\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/css-loader/-/css-loader-0.26.4.tgz#b61e9e30db94303e6ffc892f10ecd09ad025a1fd",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/css-loader/-/css-loader-0.26.4.tgz",
    "hash": "b61e9e30db94303e6ffc892f10ecd09ad025a1fd",
    "registry": "npm",
    "packageName": "css-loader"
  },
  "registry": "npm",
  "hash": "b61e9e30db94303e6ffc892f10ecd09ad025a1fd"
}